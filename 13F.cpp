#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <fstream>

using namespace std;

constexpr int64_t block_size = 100'000'000;
constexpr int64_t blocks = 1000;
constexpr int64_t N = block_size * blocks;

vector<int> build_primes(int64_t limit)
{
    vector<int> primes;
    vector<char> sieve(limit + 1);
    for (int64_t n = 2; n <= limit; ++n) {
        if (sieve[n] == 0) {
            primes.push_back(int(n));
            for (int64_t k = n * n; k <= limit; k += n) {
                sieve[k] = 1;
            }
        }
    }
    return primes;
}


int64_t count_primes(int64_t offset, int64_t limit, const vector<int>& primes)
{
    if (limit < offset) {
        return 0;
    }
    vector<char> sieve(limit - offset + 1);
    for (int i = 0; i < int(primes.size()); ++i) {
        int64_t p = primes[i];
        int64_t q0 = max((offset + p - 1) / p, p) * p;
        for (int64_t q = q0; q <= limit; q += p) {
            sieve[q - offset] = 1;
        }
    }
    return count(sieve.begin(), sieve.end(), 0);
}

vector<int64_t> B = {
    5761457,-443975,-144094,-89387,-64460,-50705,-40608,-34980,-30212,-24717,-23383,-22701,-18607,-16488,-16085,-15750,-14119,-11783,-13897,-11147,
    -10120,-10643,-8778,-11311,-8583,-6128,-10771,-7959,-6313,-8227,-6422,-6940,-7140,-5657,-5230,-6334,-5422,-5704,-6246,-5244,
    -5930,-4223,-3889,-4939,-5337,-3873,-4148,-5272,-3774,-5124,-2908,-3421,-3731,-5513,-2650,-3111,-2914,-5172,-3259,-2182,
    -4229,-1675,-4361,-4775,-2507,-127,-5021,-2689,-3878,-1924,-1777,-5160,-1793,-1798,-2395,-4495,-1922,-1890,-1937,-1791,
    -2561,-4019,-223,-3768,-2506,-1113,-3718,-1983,-1649,-2528,-1172,-4899,2713,-5061,-1989,-1317,-676,-3344,-1819,-2307,
    -1804,-2745,-722,-2352,-2343,-1261,-1080,-1308,-3353,-936,-1872,-282,-5040,173,-1380,838,-3134,-3316,-867,-2391,
    -104,-2324,-398,-2910,716,-3368,-1950,-892,-100,-2511,-1573,-1401,-1455,-398,-2480,-1427,-542,-933,-3828,359,
    -3394,1621,-1285,-2291,-898,-1204,-1754,330,-3618,118,-1346,-331,-2243,-1379,-1968,1195,-1404,-3070,-795,-1060,
    -873,-555,-1744,-2241,666,-1869,125,-1631,-964,-1492,-1617,-44,-2500,-306,-1464,367,-2303,-1615,826,-1335,
    -1482,-2294,507,-1133,-343,-2383,-483,-503,-2248,930,-1468,633,-1712,-1859,-762,-2880,2222,-3315,-6,-208,
    -1411,-789,-722,-474,-2082,501,-1330,-1660,743,-2201,537,-2522,258,-1853,401,-927,-394,-3261,910,-965,
    -1218,649,-3316,2,121,-791,-493,-1671,-900,-610,-726,-55,-2539,18,1156,-1309,-1145,-2360,1228,-823,
    -615,-2478,255,-376,-2891,1242,-843,-1769,616,-185,-1876,325,-2163,-737,-262,1014,-2997,-108,-385,-113,
    -1168,-465,387,-1035,-1607,52,-882,-897,-1625,810,180,-2349,1056,-3164,1194,-111,-1764,-545,-2721,2257,
    -1006,-1337,-1634,-38,879,-2019,526,695,-2908,684,-1622,-1203,112,-593,-138,-1228,-923,1414,-1786,-1784,
    303,1666,-2288,-1022,-1551,1867,-271,-2030,-961,-1131,640,-1313,393,-356,-809,-1861,463,-866,636,-961,
    -674,-2053,2159,-2513,671,-1584,-1348,2164,-1661,-84,-1294,-747,-1165,455,-991,-855,-115,-2262,2080,-305,
    -1724,-309,1279,-1857,23,-632,-1188,-496,-112,901,-4185,2327,-642,496,-1694,-743,-667,1000,-2245,2104,
    -2256,126,-1739,-1319,398,618,361,-2875,138,-656,641,-1523,454,-49,-2449,1147,-338,-1916,833,370,
    -196,-1190,-2830,770,526,-661,-1288,-290,-1610,2978,-2315,-2008,1536,-221,-2022,599,-481,1242,-1446,-823,
    -1495,-657,2670,-2664,-257,1642,-2794,1500,-2578,656,-3245,1420,1070,-1079,-186,1168,-4105,3236,-2580,890,
    -586,-635,-714,398,-1479,426,-1606,-2582,3553,-3757,2564,-1864,756,-882,-522,-84,-125,504,-1032,-964,
    -429,-543,388,-1739,1156,-1001,18,-427,-708,-284,1430,-2919,-13,-103,-2201,2073,268,-1285,34,-1483,
    -1699,1380,-883,-697,1625,-1356,140,-1739,1226,-578,-3249,1563,473,-150,-2016,1035,-726,-865,1051,-600,
    -1720,-340,41,-916,1254,-860,-616,-566,844,-131,-1952,1384,-1038,-728,-1239,918,-2522,1588,178,624,
    -4258,1215,1199,356,-1604,-185,728,-1312,-1367,878,459,-940,-1596,-425,685,-46,538,-1138,-790,283,
    -2088,-876,-91,2278,-1465,1764,-2283,-26,-1817,-16,2089,-2107,1485,-794,-1605,-591,1215,-2063,78,-314,
    -494,-568,1583,767,-3784,572,66,979,-1519,1185,-1334,-1910,545,-211,406,-335,-1242,165,680,-1568,
    633,-172,-1770,1571,-1132,-2567,2612,-290,-2200,1812,-2165,1851,-1272,-3502,4332,-1785,895,-2660,-53,439,
    540,-935,-380,-289,-2334,643,2063,-796,-2501,1850,-548,390,-1399,360,-379,-650,-1278,1094,-1232,1864,
    -1732,396,-21,-1030,-355,-499,-680,1057,-511,-2063,753,314,-1379,-965,1733,-1140,179,-233,-1094,1433,
    -1550,-25,1100,-2297,-112,-808,1808,-1184,-743,2398,-2900,-419,-359,885,-744,551,106,-1207,-917,-248,
    1934,-1980,-518,418,-1297,-539,-307,1639,-1117,2,153,325,-2349,1745,-1649,22,-255,-1574,1819,-1987,
    1074,399,-809,-169,-1838,1627,-1554,166,348,-1695,542,820,-1792,321,993,-557,-167,-1890,1071,-1007,
    -1015,884,1063,-41,-2012,1056,-366,-1633,632,568,-831,-918,-588,1751,-2218,-79,2460,-3589,1610,-1185,
    -1171,280,-300,857,317,-2327,2094,-2171,-672,1935,759,-688,-1200,508,-364,-3897,2449,-1423,-397,-521,
    776,1312,-738,-342,-1487,2390,-2284,-182,454,-244,11,-15,-359,-469,-1140,116,-773,731,-1566,-459,
    1728,-767,1017,-621,-927,-1304,1754,-1592,999,-1741,1949,-2364,816,322,-1162,841,-487,-2289,1484,822,
    -1845,243,470,-1187,1891,-841,-1420,-986,2295,-2696,1262,-618,-44,-1220,105,-448,814,-2686,1291,-1134,
    1237,-564,649,397,-987,-1117,1826,-2278,399,1182,-373,-2336,-228,1458,-1946,943,-765,304,58,-895,
    142,-972,1374,-586,233,-2249,1663,-1070,-585,203,234,346,-401,-1018,521,-1923,1514,310,-2284,1814,
    -1967,1382,421,-918,-1592,1351,-1435,1628,-2660,2053,-2469,1154,215,708,238,-1861,-407,-2427,3810,-2148,
    359,-1974,951,872,-460,1282,-2993,1452,-1459,1254,-965,-705,1438,-762,-3255,1739,1738,-1388,13,-24,
    -968,-788,-398,-693,2642,-1749,-1177,2696,-2061,1412,-1402,1266,-1458,389,-2813,2382,254,-2006,-1675,1505,
    567,-382,601,-728,-300,416,-3,-2451,1668,-681,1368,-3028,760,1107,308,-1771,-1682,2667,-3497,1327,
    1137,-764,277,-617,-76,-297,823,-1694,1106,-2409,1992,-1708,1615,-1044,1810,-3805,1190,811,-1547,1052,
    -1013,1660,-2914,3290,-4085,1553,-780,-917,756,1545,-2377,1111,-68,89,-452,-508,-152,558,-651,-366,
    164,-1214,21,-363,-6,-463,915,-1215,197,1249,-630,-1308,-1378,881,1643,-1375,-189,212,-185,404,
    -1339,50,-338,-1463,2490,-2134,-645,803,608,463,-408,-956,-101,-486,-197,962,-1500,1570,-965,617,
    -25,-1269,-742,-577,879,382,-1615,241,-361,1329,-3362,2761,22,-1024,175,-1066,-719,1338,-675,1047,
};

void build_table()
{
    int primeLimit = int(sqrt(double(N))) + 1;
    auto primes = build_primes(primeLimit);
    vector<int64_t> B(blocks);
    int64_t total = -2;
    for (int i = 0; i < blocks; ++i) {
        B[i] = count_primes(i * block_size, (i + 1) * block_size - 1, primes);
        total += B[i];
        cout << total << " up to " << (i + 1) * block_size - 1 << " delta " << B[i] << "\n";
    }
    for (int i = 0; i < blocks; ++i) {
        if (i == 0) {
            cout << B[0] << ",";
        } else {
            cout << B[i] - B[i - 1] << ",";
        }
        if (i % 20 == 19) {
            cout << "\n    ";
        }
    }
}

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int64_t N;
    cin >> N;
    if (N < 2) {
        cout << "0\n";
        return 0;
    }
    int primeLimit = int(sqrt(double(N))) + 1;
    auto primes = build_primes(primeLimit);
    int64_t blocks = N / block_size;
    int64_t ans = -2;
    for (int64_t i = 0; i < blocks; ++i) {
        if (i > 0) {
            B[i] = B[i] + B[i - 1];
        }
        ans += B[i];
    }
    ans += count_primes(blocks * block_size, N, primes);
    cout << ans << "\n";
    return 0;
}